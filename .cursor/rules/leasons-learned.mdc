---
description: 
globs: 
alwaysApply: true
---
# Lessons learned during development

## Testing guidelines

### Test Behavior, Not Implementation
- Instead of testing log/print messages (implementation details), we should test:
- State changes (conn.process, _pending_requests)
- Error conditions (correct exceptions with proper error codes)
- System behavior (connection usability after errors)
- Recovery capabilities (continuing after non-fatal errors)

### Clear Test Focus
- Each test should have a clear, single purpose
- Tests should verify outcomes, not how we got there
- Test names and docstrings should clearly indicate what's being tested
- Assertions should focus on critical behavioral aspects

### Test Independence
- Tests shouldn't depend on implementation details like log messages
- Changes to logging shouldn't break tests
- Tests should be resilient to refactoring

### Better Error Handling Testing
- Verify the system state after errors
- Check cleanup and resource management
- Ensure proper error propagation
- Test recovery mechanisms

## What to log and Logging levels

### INFO: Happy path lifecycle events only
- Application lifecycle (startup, shutdown)
- Connection lifecycle (connect, disconnect)
- Request lifecycle (major state transitions)
- Data lifecycle (major data flow events)

### DEBUG: Details for troubleshooting
- Message contents
- State changes
- Detailed flow information
- Internal operations

### WARNING: Unexpected but recoverable situations
- Unknown message IDs
- Timeouts that can be retried
- Process requiring force kill

### ERROR: Serious issues requiring attention
- Fatal connection errors
- Initialization failures
- Protocol errors
- Unrecoverable states
